{"ast":null,"code":"var _jsxFileName = \"/Users/harshpailkar/Desktop/SoulFile/src/components/Channels.js\";\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Channels = _ref => {\n  var _s = $RefreshSig$();\n  let {\n    provider,\n    account,\n    dappcord,\n    channels,\n    currentChannel,\n    setCurrentChannel\n  } = _ref;\n  const mintNFT = async () => {\n    const minted = await dappcord.safeMint(account, \"\");\n  };\n  function ImageUploadForm() {\n    _s();\n    const [image, setImage] = useState(null);\n    const handleSubmit = e => {\n      e.preventDefault();\n      // handle the form submission here\n      console.log(image);\n    };\n    const handleImageChange = e => {\n      setImage(e.target.files[0]);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fileupload\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Upload a file to convert it to a Soul Token!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spacer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn__upload\",\n        children: \" Upload \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, this);\n  }\n  _s(ImageUploadForm, \"azb7M8tR7S/vp1+UqWJMufJLR5I=\");\n};\n_c = Channels;\nexport default Channels;\nvar _c;\n$RefreshReg$(_c, \"Channels\");","map":{"version":3,"names":["useEffect","useState","Channels","provider","account","dappcord","channels","currentChannel","setCurrentChannel","mintNFT","minted","safeMint","ImageUploadForm","image","setImage","handleSubmit","e","preventDefault","console","log","handleImageChange","target","files"],"sources":["/Users/harshpailkar/Desktop/SoulFile/src/components/Channels.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nconst Channels = ({ provider, account, dappcord, channels, currentChannel, setCurrentChannel }) => {\r\n\r\n  const mintNFT = async () => {\r\n    const minted = await dappcord.safeMint(account, \"\")\r\n  }\r\n\r\n  function ImageUploadForm() {\r\n    const [image, setImage] = useState(null);\r\n  \r\n    const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      // handle the form submission here\r\n      console.log(image);\r\n    };\r\n  \r\n    const handleImageChange = (e) => {\r\n      setImage(e.target.files[0]);\r\n    };\r\n\r\n  return (\r\n    <div className=\"fileupload\">\r\n      <h3>Upload a file to convert it to a Soul Token!</h3>\r\n      <div className=\"spacer\"></div>\r\n\r\n      <button type=\"button\" className=\"btn__upload\"> Upload </button>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default Channels;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA;AAC3C,MAAMC,QAAQ,GAAG,QAAkF;EAAA;EAAA,IAAjF;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,cAAc;IAAEC;EAAkB,CAAC;EAE5F,MAAMC,OAAO,GAAG,YAAY;IAC1B,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,QAAQ,CAACP,OAAO,EAAE,EAAE,CAAC;EACrD,CAAC;EAED,SAASQ,eAAe,GAAG;IAAA;IACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;IAExC,MAAMc,YAAY,GAAIC,CAAC,IAAK;MAC1BA,CAAC,CAACC,cAAc,EAAE;MAClB;MACAC,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;IACpB,CAAC;IAED,MAAMO,iBAAiB,GAAIJ,CAAC,IAAK;MAC/BF,QAAQ,CAACE,CAAC,CAACK,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IAEH,oBACE;MAAK,SAAS,EAAC,YAAY;MAAA,wBACzB;QAAA,UAAI;MAA4C;QAAA;QAAA;QAAA;MAAA,QAAK,eACrD;QAAK,SAAS,EAAC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAO,eAE9B;QAAQ,IAAI,EAAC,QAAQ;QAAC,SAAS,EAAC,aAAa;QAAA,UAAC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAC3D;EAEV;EAAC,GArBUV,eAAe;AAsB1B,CAAC;AAAA,KA5BKV,QAAQ;AA8Bd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}